param(
    [string]$ProjectDir, 
    [string]$ProjectName
)

# Array of project types to scan for
$projectTypes = @('Plugins', 'Interop', 'Features', 'Addons', 'Extensions')

# Find all projects in the parent directory of the main project
$parentDir = Split-Path $ProjectDir -Parent
$projects = @()
foreach ($type in $projectTypes) {
    $projects += Get-ChildItem -Path $parentDir -Filter "$ProjectName.$type.*.csproj" -Recurse
}

if ($projects.Count -eq 0) {
    Write-Host "     → No additional projects found in the parent directory."
    return
}

$generatedFile = Join-Path $ProjectDir 'Properties'
$generatedFile = Join-Path $generatedFile 'InternalsVisibleTo.g.cs'

$lines = @(
    '// <auto-generated />',
    '//',
    '//------------------------------------------------------------------------------',
    '// This code was generated by a tool.',
    '//',
    '//   Tool : GenerateInternalsVisibleTo.ps1',
    '//   Output filename: InternalsVisibleTo.g.cs',
    '//',
    '// Changes to this file may cause incorrect behaviour, and will be lost when the code is regenerated.',
    '//------------------------------------------------------------------------------'
    '',
    'using System.Runtime.CompilerServices;'
)

foreach ($project in $projects) {
    $assemblyName = [System.IO.Path]::GetFileNameWithoutExtension($project)
    Write-Host "     → Processing project: $assemblyName"
    $lines += ''
    $lines += '[assembly: InternalsVisibleTo("' + $assemblyName + '")]'
    $lines += '[assembly: InternalsVisibleTo("' + $assemblyName + '.Tests.Unit")]'
}

$lines | Set-Content -Path $generatedFile -Encoding UTF8